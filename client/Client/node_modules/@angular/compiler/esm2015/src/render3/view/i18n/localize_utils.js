import * as o from '../../../output/output_ast';
import { serializeIcuNode } from './icu_serializer';
import { metaFromI18nMessage, serializeI18nMeta } from './meta';
import { formatI18nPlaceholderName } from './util';
export function createLocalizeStatements(variable, message, params) {
    const statements = [];
    const metaBlock = serializeI18nMeta(metaFromI18nMessage(message));
    const { messageParts, placeHolders } = serializeI18nMessageForLocalize(message);
    // Update first message part with metadata
    messageParts[0] = `:${metaBlock}:${messageParts[0]}`;
    statements.push(new o.ExpressionStatement(variable.set(o.localizedString(messageParts, placeHolders, placeHolders.map(ph => params[ph])))));
    return statements;
}
class MessagePiece {
    constructor(text) {
        this.text = text;
    }
}
class LiteralPiece extends MessagePiece {
}
class PlaceholderPiece extends MessagePiece {
    constructor(name) { super(formatI18nPlaceholderName(name, /* useCamelCase */ false)); }
}
/**
 * This visitor walks over an i18n tree, capturing literal strings and placeholders.
 *
 * The result can be used for generating the `$localize` tagged template literals.
 */
class LocalizeSerializerVisitor {
    visitText(text, context) {
        if (context[context.length - 1] instanceof LiteralPiece) {
            // Two literal pieces in a row means that there was some comment node in-between.
            context[context.length - 1].text += text.value;
        }
        else {
            context.push(new LiteralPiece(text.value));
        }
    }
    visitContainer(container, context) {
        container.children.forEach(child => child.visit(this, context));
    }
    visitIcu(icu, context) {
        context.push(new LiteralPiece(serializeIcuNode(icu)));
    }
    visitTagPlaceholder(ph, context) {
        context.push(new PlaceholderPiece(ph.startName));
        if (!ph.isVoid) {
            ph.children.forEach(child => child.visit(this, context));
            context.push(new PlaceholderPiece(ph.closeName));
        }
    }
    visitPlaceholder(ph, context) {
        context.push(new PlaceholderPiece(ph.name));
    }
    visitIcuPlaceholder(ph, context) {
        context.push(new PlaceholderPiece(ph.name));
    }
}
const serializerVisitor = new LocalizeSerializerVisitor();
/**
 * Serialize an i18n message into two arrays: messageParts and placeholders.
 *
 * These arrays will be used to generate `$localize` tagged template literals.
 *
 * @param message The message to be serialized.
 * @returns an object containing the messageParts and placeholders.
 */
export function serializeI18nMessageForLocalize(message) {
    const pieces = [];
    message.nodes.forEach(node => node.visit(serializerVisitor, pieces));
    return processMessagePieces(pieces);
}
/**
 * Convert the list of serialized MessagePieces into two arrays.
 *
 * One contains the literal string pieces and the other the placeholders that will be replaced by
 * expressions when rendering `$localize` tagged template literals.
 *
 * @param pieces The pieces to process.
 * @returns an object containing the messageParts and placeholders.
 */
function processMessagePieces(pieces) {
    const messageParts = [];
    const placeHolders = [];
    if (pieces[0] instanceof PlaceholderPiece) {
        // The first piece was a placeholder so we need to add an initial empty message part.
        messageParts.push('');
    }
    for (let i = 0; i < pieces.length; i++) {
        const part = pieces[i];
        if (part instanceof LiteralPiece) {
            messageParts.push(part.text);
        }
        else {
            placeHolders.push(part.text);
            if (pieces[i - 1] instanceof PlaceholderPiece) {
                // There were two placeholders in a row, so we need to add an empty message part.
                messageParts.push('');
            }
        }
    }
    if (pieces[pieces.length - 1] instanceof PlaceholderPiece) {
        // The last piece was a placeholder so we need to add a final empty message part.
        messageParts.push('');
    }
    return { messageParts, placeHolders };
}
//# sourceMappingURL=data:application/json;base64,